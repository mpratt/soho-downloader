#!/bin/bash
############################################################
# Script en Bash encargado de descargar las fotos de la
# galeria de soho.com.co.
# Autor: Michael Pratt | http://wwww.michael-pratt.com/
#
# Licencia: MIT
# Copyright (C) 2011 by Michael Pratt <pratt@hablarmierda.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
###########################################################
#set -e
shopt -s checkwinsize
APPNAME="Soho Downloader"
VERSION="1.0.6"
CWD=$(pwd)
TMPDIR=${TMPDIR:-$(mktemp -d -t soho_script.XXXXXX)}
DOWNLOADDIR=${DOWNLOADDIR:-$CWD/GaleriaSoho}
DIALOG=${DIALOG:-dialog}
AUTOUPDATES=${AUTOUPDATES:-1}
REFERRERS=( "http://www.soho.com.co" "http://www.soho.com.co/home-galerias" "http://www.soho.com.co/galerias-mujeres/galeria/marbelle/15211")
USERAGENTS=( "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; Media Center PC 4.0; SLCC1; .NET CLR 3.0.04320)" "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:2.0.1) Gecko/20110606 Firefox/4.0.1" )
LISTFETCH=( "http://www.soho.com.co/galerias-mujeres/galeria/adriana-silva/16550" "http://www.soho.com.co/galerias-mujeres/galeria/marbelle/15211" "http://www.soho.com.co/galerias-mujeres/galeria/adriana-riascos/15959" )
MAXTRIES=${MAXTRIES:-8}
DEBUG=${DEBUG:-0}

! [ -e "${DOWNLOADDIR}" ] && (mkdir -p ${DOWNLOADDIR})
! [ -e "${TMPDIR}" ] && (mkdir -p ${TMPDIR})

trap "soho_exit" 0 1 2 5 15
#################################################################
# Funcion encargada de crear un logsito bien sabroso XD
#################################################################
soho_log() { echo "$(date +%H:%M:%S): ${1}" >> "${CWD}/soho.log"; }
soho_echo() { echo "${1}" && soho_log "${1}"; }

#################################################################
# Funcion encargada de limpiar el directorio temporal
#################################################################
soho_exit()
{
	rm -rf ${TMPDIR}
	soho_log "======================================================================="
	soho_log "Finalizando Script"
	soho_log "======================================================================="
	soho_log ""
	exit 0
}

#################################################################
# Funcion encargada de mantener la sesion!
#################################################################
soho_session()
{
	# "http://www.soho.com.co/home"
	local session=${LISTFETCH[$((RANDOM %= $((${#LISTFETCH[@]}))))]}
	local referrer=${REFERRERS[$((RANDOM %= $((${#REFERRERS[@]}))))]}
	local useragent=${USERAGENTS[$((RANDOM %= $((${#USERAGENTS[@]}))))]}
	curl -L --connect-timeout 20 -A "${useragent}" -e ${referrer} -c ${TMPDIR}/c.txt -s ${session} > ${TMPDIR}/session
}

#################################################################
# Funcion encargada de crear una lista con toda la informacion
# el Formato de la lista es NOMBREGALERIA|IDGALERIA|EDICION
#################################################################
soho_fetch_list()
{
	echo "Iniciando session"
	soho_session

	cd ${TMPDIR}
	local listurl=${LISTFETCH[$((RANDOM %= $((${#LISTFETCH[@]}))))]}
	local useragent=${USERAGENTS[$((RANDOM %= $((${#USERAGENTS[@]}))))]}
	echo "Descargando la lista de modelos y ediciones ......"
	curl -L --connect-timeout 20 -A ${useragent} -s ${listurl} > ${TMPDIR}/source
	egrep -i '<option (.*)?value="' ${TMPDIR}/source | uniq | egrep -i -o 'galeria([^"]+)' | sed 's:galerias-mujeres/::g; s:galeria/::g; s:/:|:g;' > ${TMPDIR}/ids
	egrep -i '<option (.*)?value="' ${TMPDIR}/source | uniq | egrep -i 'galeria([^"]+)' | egrep -o '[[:digit:]]+</option>' | egrep -o '[[:digit:]]+' > ${TMPDIR}/eds

	if [ "$(stat -c%s ${TMPDIR}/ids)" -eq 0 ] || [ "$(stat -c%s ${TMPDIR}/eds)" -eq 0 ]; then
		soho_echo "*** Error Fatal! No pude encontrar la lista con las modelos y ediciones!"
		[ "$DEBUG" -eq "1" ] && soho_echo "Usando ${listurl} para buscar la lista."
		echo "Verifica tu conexion a internet."
		exit 1
	fi

	if [[ "$(cat ${TMPDIR}/ids | wc -l)" != "$(cat ${TMPDIR}/eds | wc -l)" ]]; then
		soho_echo "*** Advertencia: El numero de ids ($(cat ${TMPDIR}/ids | wc -l)) no coincide con el numero de ediciones $(cat ${TMPDIR}/eds | wc -l)"
	fi

	echo "Combinando lista de modelos/ediciones"
	paste -d "|" ${TMPDIR}/ids ${TMPDIR}/eds > ${TMPDIR}/main_list
	rm -rf ${TMPDIR}/{ids,eds,source}
}

#################################################################
# Funcion para descargar una galeria
#################################################################
soho_download_gallery()
{
	local gallery=${1}
	if [ -z "$gallery" ] || [ -z "$(echo $gallery | egrep '^[[:digit:]]+$')" ]; then
		soho_echo "*** Error: El id de la galeria es invalido ($gallery)"
		return 1
	fi

	[ "$(echo $[($RANDOM%10)+1])" -gt "6" ] && soho_session
	echo "Opteniendo Informacion sobre la Galeria $gallery......... "
	local referrer=${REFERRERS[$((RANDOM %= $((${#REFERRERS[@]}))))]}
	local useragent=${USERAGENTS[$((RANDOM %= $((${#USERAGENTS[@]}))))]}
	local images=$(curl -L -s -b ${TMPDIR}/c.txt --connect-timeout 20 -A "${useragent}" -e $referrer -d '{idItem:'$gallery',idTipoImagen:1}' -H 'content-type: application/json' -H 'SOAPAction: "http://tempuri.org/getGaleria"' http://www.soho.com.co/ws/wsGaleria.asmx/getGaleria |  sed 's/"/\n/g' | egrep -i -o 'http:(.*)jpg')
	local galleryname=$(grep '|'$gallery'|' $TMPDIR/main_list | awk 'BEGIN {FS="|"} {print $1}')
	local galleryedition=$(grep '|'$gallery'|' $TMPDIR/main_list | awk 'BEGIN {FS="|"} {print $3}')
	local gallerypics=$(echo $images | wc -w)

	if [ -z "$images" ] && [ "${MAXTRIES}" -gt "0" ] && [ -n "$galleryname" ] && [ -n "$galleryedition" ]; then
		local tries=1
		while [ -z "$images" ] && [ "${tries}" -le "${MAXTRIES}" ]; do
			local sleep=$(echo $[($RANDOM % 7)+1])
			referrer=${REFERRERS[$((RANDOM %= $((${#REFERRERS[@]}))))]}

			soho_echo "* Reintentando ${gallery} (${tries} de ${MAXTRIES} intentos, esperando ${sleep} segundos)"
			images=$(curl -L -s -b ${TMPDIR}/c.txt --connect-timeout 20 -A "${useragent}" -e $referrer -d '{idItem:'$gallery',idTipoImagen:1}' -H 'content-type: application/json' -H 'SOAPAction: "http://tempuri.org/getGaleria"' http://www.soho.com.co/ws/wsGaleria.asmx/getGaleria |  sed 's/"/\n/g' | egrep -i -o 'http:(.*)jpg')
			gallerypics=$(echo $images | wc -w)
			sleep ${sleep}

			((tries++))
		done
	fi

	if [ -z "$galleryname" ] || [ -z "$galleryedition" ] || [ -z "$images" ]; then
		soho_echo "*** Error: No existe la galeria con id ${gallery}"

		if [ "$DEBUG" -eq "1" ]; then
			soho_log "Nombre Galeria: $galleryname"
			soho_log "Edicion Galeria: $galleryedition"
			soho_log "Imagenes: $images"
			soho_log "Comando: curl -L -s -b ${TMPDIR}/c.txt --connect-timeout 20 -A \"${useragent}\" -e $referrer -d '{idItem:'$gallery',idTipoImagen:1}' -H 'content-type: application/json' -H 'SOAPAction: \"http://tempuri.org/getGaleria\"' http://www.soho.com.co/ws/wsGaleria.asmx/getGaleria"
			soho_log "Cookie: $(cat ${TMPDIR}/c.txt)"
			soho_log "-----------------"
		fi

		# Mejor un return que un exit, asi no se interrumpe ningun proceso
		return 1
	fi

	echo "======================================================================="
	echo "Existen $gallerypics Imagenes en la Galeria $galleryname - Edicion $galleryedition"
	echo "======================================================================="
	echo "Creando directorio $DOWNLOADDIR/$galleryname"
	cd ${DOWNLOADDIR}
	mkdir -p ${galleryname}
	cd ${galleryname}
	soho_log "Bajando $gallerypics imagenes de la galeria $galleryname"

	local i=1
	local downloaded=0
	for url in ${images}; do
		[ "$DEBUG" -eq "1" ] && soho_log "Bajando Galeria $galleryname - Imagen: $url"
		echo "Bajando: $i de $gallerypics"
		wget --user-agent="Mozilla/5.0" --quiet -O pic${i}.jpg ${url}

		if [ -f "pic${i}.jpg" ] && [ "$(stat -c%s pic${i}.jpg)" -gt 0 ]; then
				mv pic${i}.jpg ${galleryname}_Edicion-${galleryedition}_${i}.jpg
				((downloaded++))
			else
				soho_echo "*** Error: No pude descargar la imagen $url"
		fi

		((i++))
	done

	[ "${downloaded}" -lt "$gallerypics" ] && soho_log "*** La galeria $galleryname no fue bajada completamente (${downloaded} de $gallerypics)"
	echo "======================================================================="
	echo "Galeria $galleryname terminada!"
	echo "======================================================================="
	echo ""
	[ "$DEBUG" -eq 1 ] && soho_log "Fin $galleryname"
}

#################################################################
# Funcion para descargar todas las galerias
#################################################################
soho_download_all()
{
	cd ${TMPDIR}
	awk 'BEGIN {FS="|"} {print $2}' main_list > total_ids
	for id in $(cat $TMPDIR/total_ids); do
		soho_download_gallery ${id}
	done
	rm -rf ${TMPDIR}/total_ids
}

#################################################################
# Funcion para descargar las galerias mas recientes
#################################################################
soho_download_recent()
{
	local recent=${1}
	[ -z "$recent" ] && recent=4

	cd ${TMPDIR}
	awk 'BEGIN {FS="|"} {print $3}' ${TMPDIR}/main_list | tr -d [:alpha:] | tr -d [:punct:] | \
	sort -n | tr -d [:blank:] | uniq | tail -n ${recent} > recent_eds

	echo "Buscando las $recent Ediciones mas recientes..."
	for ed in $(cat ${TMPDIR}/recent_eds); do
		for id in $(egrep '\|'$ed'$' ${TMPDIR}/main_list | awk 'BEGIN {FS="|"} {print $2}'); do
			soho_download_gallery ${id}
		done
	done

	rm -rf ${TMPDIR}/recent_eds
}

#################################################################
# Funcion encargada de buscar por modelos y descargar sus galerias
#################################################################
soho_search()
{
	if [ "$#" -eq 0 ] || [ -z "$1" ]; then
		soho_echo "Debes introducir un texto para iniciar la busqueda"
		exit 0
	fi

	clear
	echo "Buscando Galerias ......."
	local i=1
	local total=$(cat $TMPDIR/main_list | wc -l)
	touch ${TMPDIR}/dialog_in
	(cat ${TMPDIR}/main_list | while read line; do
		local match=$(echo $line | egrep -i $(echo $@ | sed "s: :|:g"))

		if [ -n "$match" ]; then
			local name=$(echo $line | awk 'BEGIN {FS="|"} {print $1}')
			local edition="(Edicion_$(echo $line | awk 'BEGIN {FS="|"} {print $3}'))"
			local id=$(echo $line | awk 'BEGIN {FS="|"} {print $2}')
			printf "\"%s\" \"%s\" off \\ \n" ${id} $(echo ${name}${edition}) >> ${TMPDIR}/dialog_in
		fi

		((i++))
		echo $(echo $i*100/$total | bc)
	done) | ${DIALOG} --clear --title "$APPNAME $VERSION" --backtitle "$APPNAME $VERSION" --gauge "Buscando en la lista de modelos $(echo $@ | sed 's:|:+:g')" 15 110 0
	[ "$DEBUG" -eq 1 ] && soho_log "Buscando '$@' en $i lineas de $(cat $TMPDIR/main_list | wc -l)"

	if [ "$(stat -c%s $TMPDIR/dialog_in)" -eq 0 ]; then
		clear
		soho_echo "No se encontraron galerias con el termino '$(echo $@ | sed 's: :|:g')' - Finalizando..."
		exit 0
	fi
	cat ${TMPDIR}/dialog_in | uniq | xargs ${DIALOG} --title "$APPNAME $VERSION" --backtitle "$APPNAME $VERSION" --item-help --separate-output --checklist "Escoge las Modelos que quieres descargar: ($(cat $TMPDIR/dialog_in | wc -l) resultados)" 19 70 10 2> ${TMPDIR}/search

	for galleryid in $(cat $TMPDIR/search | sort -u); do
		soho_download_gallery ${galleryid}
	done

	rm -rf ${TMPDIR}/{dialog_in,search}
}

#################################################################
# Funcion encargada de mostrar un formulario para buscar galerias
#################################################################
soho_query()
{
	${DIALOG} --clear --title "$APPNAME $VERSION" \
              --backtitle "$APPNAME $VERSION" \
              --inputbox "Escribe los nombres de las modelos o galerias que estas buscando: (Ej: Natalia, Piscina)" 15 110 2> ${TMPDIR}/findme

	soho_search $(cat $TMPDIR/findme)
	rm -rf ${TMPDIR}/findme
}

#################################################################
# Funcion encargada de buscar por actualizaciones a este script
#################################################################
soho_update()
{
	touch ${TMPDIR}/lock
	soho_loading "Buscando por actualizaciones......" ${TMPDIR}/lock &

	local updateurl="https://raw.github.com/mpratt/soho-downloader/master/README"
	local remoteversion=$(curl -L --connect-timeout 10 -A 'Mozilla/5.0' -s ${updateurl} | egrep -i '\$version=(.*)' | egrep -o '[[:digit:]\.]+' | sed 's:\.::g')
	local localversion=$(echo $VERSION | sed 's:\.::g')
	rm -rf ${TMPDIR}/lock
	echo ""

	if [ -z "$(echo ${remoteversion} | egrep '^[[:digit:]]+$')" ]; then
		soho_echo "***** No pude determinar la version mas reciente de este script (${remoteversion})******"
	elif [ "${remoteversion}" -gt "${localversion}" ]; then
		soho_echo "**** Hay una version nueva de este script ****"
		echo "**** Visita http://www.michael-pratt.com para descargar la nueva version ****"
		echo "**** Continuando.... ****"
		sleep 5
	elif [ "${remoteversion}" -eq "${localversion}" ]; then
		echo "Estas usando la version mas reciente :)"
	elif [ "${remoteversion}" -lt "${localversion}" ]; then
		echo "**** Version 1337"
	fi

	return 0
}

#################################################################
# Funcion encargada de mostrar el "spinner"
#################################################################
soho_loading()
{
	[ "${#}" -lt "2" ] && return 0
	local message=${1}
	local lockfile=${2}
	local spin=( "|" "/" "-" "\\" )
	local parts=${#spin[@]}
	local count=0

	tput civis
	echo -n "${message} "
	while [ -e "${lockfile}" ]; do
		count=$(( count + 1 ))
		tput sc
		echo -n ${spin[$((count%parts))]}
		tput rc
		sleep 0.1
	done
	tput cnorm
	[ -n "${3}" ] && echo " ${3}"
}

#################################################################
# Funcion que muestra la ayuda
#################################################################
soho_help()
{
	clear
	echo "$APPNAME - $VERSION"
	echo "Requerimientos: ${DIALOG}, wget, curl"
	echo "Script en bash que descarga las galerias de soho.com"
	echo "Autor: Michael Pratt <pratt@hablarmierda.net>"
	echo "Url: http://www.michael-pratt.com/"
	echo "Licencia: MIT X11 http://www.opensource.org/licenses/mit-license.php"
	echo ""
	echo "Uso: $(basename $0) [opciones]"
	echo "	-m | --menu"
	echo "	-s | --search [modelo|galeria]"
	echo "	-a | --all (Descarga todas las galerias)"
	echo "	-r | --recent [cantidad]"
	echo "	-u | --update (Busca por actualizaciones)"
	echo "	-h | --help (Muestra este mensaje)"
	echo ""
	exit 0
}

#################################################################
# Menu Grafico con ayuda de $DIALOG
#################################################################
soho_menu()
{
	cd ${TMPDIR}
	${DIALOG} --clear --title "$APPNAME $VERSION" \
			  --backtitle "$APPNAME $VERSION" \
			  --menu "Escoge tu arma:" 15 110 8 \
			  "1" "Escoge las galerias que quieres descargar" \
			  "2" "Bajar Todas las galerias disponibles" \
			  "3" "Busca una galeria por nombre o modelo" \
			  "4" "Baja las galerias de las 4 ediciones mas recientes" \
			  "5" "Baja las galerias de la ultima edicion disponible" \
			  "6" "Asegurate de estar usando la version mas reciente de este Script" \
			  "7" "Necesitas Ayuda?" 2> ${TMPDIR}/menu

	clear
	case "$(cat ${TMPDIR}/menu)" in
		1) soho_search ".*";;
		2) soho_download_all;;
		3) soho_query ;;
		4) soho_download_recent 4;;
		5) soho_download_recent 1;;
		6) soho_update ;;
		7) soho_help ;;
		*) clear && echo "Chao!";;
	esac

	rm -rf ${TMPDIR}/menu
}

#################################################################
# Funcion encargada de verificar dependencias
#################################################################
soho_requires()
{
	local app
	for app in ${@}; do
		echo "Verificando $app....."
		if ! [ "$(which $app 2> /dev/null)" ]; then
			soho_echo "*** Error Fatal! Para correr este script se requiere la instalacion de $app"
			exit 1
		fi
	done
}

#################################################################
# En aquellos dias, era imposible conciliar el sueño......
#################################################################
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	soho_help
	exit 0
fi

soho_requires curl ${DIALOG} wget bc && clear
soho_echo "======================================================================="
soho_echo "$APPNAME - $VERSION"
echo "Las fotos pertenecen a la pagina de Soho | http://www.soho.com.co"
soho_echo "======================================================================="
[ "$DEBUG" -eq 1 ] && soho_log "$(bash --version | head -n 1)" && soho_echo "Comando Usado: ./$(basename $0) $@"
[ -e "${CWD}/dialogrc" ] && export DIALOGRC="${CWD}/dialogrc" && soho_log "Usando configuracion de colores ${CWD}/dialogrc"
[ "$AUTOUPDATES" -eq 1 ] && soho_update
soho_fetch_list

case "$1" in
      -m|--menu) soho_menu;;

      -s|--search)
		shift
		soho_search ${@};;

      -a|--all) soho_download_all;;

      -r|--recent)
		shift
		soho_download_recent ${1};;

      -u|--update) soho_update;;

      *) soho_menu;;
esac
exit 0